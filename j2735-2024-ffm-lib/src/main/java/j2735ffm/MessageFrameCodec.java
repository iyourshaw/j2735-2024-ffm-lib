package j2735ffm;

import java.lang.foreign.Arena;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.ValueLayout;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.HexFormat;

import static j2735_2024_MessageFrame.MessageFrame_h.*;
import j2735_2024_MessageFrame.*;
import lombok.extern.slf4j.Slf4j;


/**
 * Functions for interconverting J2735 (2024) MessageFrames between XER, JER, and UPER encodings
 * by calling native functions generated by asn1c.
 *
 * @author Ivan Yourshaw
 */
@Slf4j
public class MessageFrameCodec {

    /**
     * Output buffer size for XER and JSON.  Messages larger than this can't be produced.
     */
    public final long textBufferSize;

    /**
     * Buffer size for UPER binary messages.  Messages larger than this can't be produced.
     */
    public final long uperBufferSize;

    /**
     * Buffer size for internal representation of a MessageFrame_t struct
     */
    public final long messageFrameAllocateSize;

    public final long asnCodecCtxMaxStackSize;

    public MessageFrameCodec() {
        this.textBufferSize = 262144L;
        this.uperBufferSize = 8192L;
        this.messageFrameAllocateSize = 16384L;
        this.asnCodecCtxMaxStackSize = 30000L;
        log.info("MessageFrameCodec initialized with defaults: textBufferSize: {}, uperBufferSize: {}, messageFrameAllocateSize: {}, asnCodecCtxMaxStackSize: {}",
                textBufferSize, uperBufferSize, messageFrameAllocateSize, asnCodecCtxMaxStackSize);
    }

    public MessageFrameCodec(
            long textBufferSize,
            long uperBufferSize,
            long messageFrameAllocateSize,
            long asnCodecCtxMaxStackSize) {
        this.textBufferSize = textBufferSize;
        this.uperBufferSize = uperBufferSize;
        this.messageFrameAllocateSize = messageFrameAllocateSize;
        this.asnCodecCtxMaxStackSize = asnCodecCtxMaxStackSize;
        log.info("MessageFrameCodec initialized with textBufferSize: {}, uperBufferSize: {}, messageFrameAllocateSize: {}, asnCodecCtxMaxStackSize: {}",
                textBufferSize, uperBufferSize, messageFrameAllocateSize, asnCodecCtxMaxStackSize);
    }


    public byte[] xerToUper(String xer) {
        try (var arena = Arena.ofConfined()) {
            MemorySegment messageFrame = xerToMessageFrame(arena, xer);
            return messageFrameToUper(arena, messageFrame);
        }
    }

    public byte[] jerToUper(String jer) {
        try (var arena = Arena.ofConfined()) {
            MemorySegment messageFrame = jerToMessageFrame(arena, jer);
            return messageFrameToUper(arena, messageFrame);
        }
    }

    public String uperToXer(byte[] uper) {
        log.info("Received {} bytes", uper.length);
        try (var arena = Arena.ofConfined()) {
            MemorySegment messageFrame = uperToMessageFrame(arena, uper);
            return messageFrameToXer(arena, messageFrame);
        }
    }

    public String uperToJer(byte[] uper) {
        log.info("Received {} bytes", uper.length);
        try (var arena = Arena.ofConfined()) {
            MemorySegment messageFrame = uperToMessageFrame(arena, uper);
            return messageFrameToJer(arena, messageFrame);
        }
    }

    public String xerToJer(String xer) {
        try (var arena = Arena.ofConfined()) {
            MemorySegment messageFrame = xerToMessageFrame(arena, xer);
            return messageFrameToJer(arena, messageFrame);
        }
    }

    public String jerToXer(String jer) {
        try (var arena = Arena.ofConfined()) {
            MemorySegment messageFrame = jerToMessageFrame(arena, jer);
            return messageFrameToXer(arena, messageFrame);
        }
    }

    private void printMessageFrame(Arena arena, MemorySegment messageFrame) {
        log.info("Printing message frame");
        int printResult = asn_fprint(stdout(), asn_DEF_MessageFrame(), messageFrame);
        log.info("Printed message frame to stdout, result: " + printResult);
    }

    private MemorySegment decodeToMessageFrame(Arena arena, final byte[] bytes, final int asnTransferSyntax) {
        log.info("decodeToMessageFrame, num bytes: {}, transfer syntax: {}", bytes.length,
                asnTransferSyntax);

        MemorySegment heapBytes = MemorySegment.ofArray(bytes);
        MemorySegment optCodecParameters = optCodecParameters(arena);

        // The result Message Frame
        //
        // Allocate the memory to receive a MessageFrame_t structure, because passing a pointer to 0 and having the
        // decoder create the structure dynamically, as the C API docs recommend, would create a memory leak, because
        // since we don't know the size of the created struct we can't reinterpret and free the memory using
        // malloc/free, nor do we have access to the ASN_STRUCT_FREE macro from here.
        //
        // TODO Create a C header and function to expose ASN_STRUCT_FREE to FFM
        // Also see https://docs.oracle.com/en/java/javase/23/core/foreign-functions-that-return-pointers.html
        //
        // Meanwhile, instead, pre-allocate a buffer large enough to handle the expected size of the returned data
        // structure, managed by the memory arena, so it will be freed at the end of the try-with-resources.
        //
        // UPER decoding fails using MessageFrame_t.allocate(),  probably because the MessageFrame value is an ASN.1
        // open type whose size can't be determined just from the top level struct, so preallocate a fixed buffer size
        // to make sure it is large enough.
        MemorySegment messageFrame = arena.allocate(messageFrameAllocateSize);

        // Pointer to result MessageFrame
        MemorySegment structurePtr = arena.allocate(ValueLayout.ADDRESS.byteSize());

        // We  assume the address is a Java long.  But if the FFM code were recompiled on a platform other than x64,
        // this wouldn't necessarily be true.
        assert ValueLayout.ADDRESS.byteSize() == ValueLayout.JAVA_LONG.byteSize();

        // Point to the preallocated MessageFrame buffer
        structurePtr.set(ValueLayout.JAVA_LONG, 0, messageFrame.address());

        // Pointer to 0 that we are not using for now
        //structurePtr.set(ValueLayout.JAVA_LONG, 0, 0L);

        MemorySegment buffer = arena.allocate(bytes.length);
        buffer.copyFrom(heapBytes);
        MemorySegment er;

        er = asn_decode(arena, optCodecParameters, asnTransferSyntax, asn_DEF_MessageFrame(), structurePtr,
                buffer, bytes.length);

        long retCode = asn_dec_rval_t.code(er);
        long consumed = asn_dec_rval_t.consumed(er);
        String rcEnum = switch ((int)retCode) {
            case 0 -> "RC_OK";
            case 1 -> "RC_WMORE";
            case 2 -> "RC_FAIL";
            default -> "Unknown return code";
        };

        var msg = String.format("asn_decode return code: %s %s, consumed: %s", retCode, rcEnum, consumed);
        long messageFramePointer = structurePtr.get(ValueLayout.JAVA_LONG, 0);
        log.info("messageFrame pointer: {}", messageFramePointer);

        // This is how to get the externally allocated MessageFrame.  It works, but don't do it without
        // reinterpreting and freeing.
        //MemorySegment messageFrame = MemorySegment.ofAddress(structurePtr.get(ValueLayout.JAVA_LONG, 0));

        if (retCode == 0) {
            log.info(msg);
        } else {
            // Print partially decoded data
            printMessageFrame(arena, messageFrame);
            throw new RuntimeException("decode encountered error or RC_WMORE condition: " + msg);
        }

        return messageFrame;
    }

    private MemorySegment xerToMessageFrame(Arena arena, String xer) {
        log.info("xerToMessageFrame");
        byte[] xmlBytes = xer.getBytes(StandardCharsets.UTF_8);
        return decodeToMessageFrame(arena, xmlBytes, ATS_CANONICAL_XER());
    }

    private MemorySegment jerToMessageFrame(Arena arena, String jer) {
        log.info("jerToMessageFrame");
        byte[] jsonBytes = jer.getBytes(StandardCharsets.UTF_8);
        return decodeToMessageFrame(arena, jsonBytes, ATS_JER());
    }

    private MemorySegment uperToMessageFrame(Arena arena, byte[] uper) {
        log.info("uperToMessageFrame");
        return decodeToMessageFrame(arena, uper, ATS_UNALIGNED_BASIC_PER());
    }

    private byte[] encodeFromMessageFrame(Arena arena, MemorySegment messageFrame, final int asnTransferSyntax,
                                          final long bufferSize) {
        log.info("encodeFromMessageFrame, transferSyntax: {}, bufferSize: {}", asnTransferSyntax, bufferSize);
        byte[] outputArray = new byte[(int) bufferSize];
        MemorySegment heapOutput = MemorySegment.ofArray(outputArray);
        MemorySegment outputBuffer = arena.allocate(bufferSize);
        MemorySegment optCodecParameters = optCodecParameters(arena);
        MemorySegment erEnc = asn_encode_to_buffer(arena, optCodecParameters, asnTransferSyntax,
                asn_DEF_MessageFrame(), messageFrame, outputBuffer, bufferSize);
        long encoded = asn_enc_rval_t.encoded(erEnc);
        if (encoded > -1) {
            log.info("asn_encode_to_buffer succeeded. Encoded {} bytes", encoded);
            heapOutput.copyFrom(outputBuffer);
            return Arrays.copyOfRange(outputArray, 0, (int)encoded);
        } else {
            log.error("Error in asn_encode_to_buffer");
            throw new RuntimeException("Error calling asn_encode_to_buffer");
            // Check the error info
            // fprintf(stderr, ”Cannot encode %s: %s\n”, er.failed_type >name, strerror(errno))
            // Need c function to expose errno macro
        }
    }

    private byte[] messageFrameToUper(Arena arena, MemorySegment messageFrame) {
        log.info("messageFrameToUper");
        return encodeFromMessageFrame(arena, messageFrame, ATS_UNALIGNED_BASIC_PER(), uperBufferSize);
    }

    private String messageFrameToXer(Arena arena, MemorySegment messageFrame) {
        log.info("messageFrameToXer");
        byte[] bytes = encodeFromMessageFrame(arena, messageFrame, ATS_CANONICAL_XER(), textBufferSize);
        return new String(bytes, StandardCharsets.UTF_8);
    }

    private String messageFrameToJer(Arena arena, MemorySegment messageFrame) {
        log.info("messageFrameToJer");
        byte[] bytes = encodeFromMessageFrame(arena, messageFrame, ATS_JER(), textBufferSize);
        return new String(bytes, StandardCharsets.UTF_8);
    }

    private MemorySegment optCodecParameters(Arena arena) {
        MemorySegment optCodecParameters = asn_codec_ctx_t.allocate(arena);
        asn_codec_ctx_t.max_stack_size(optCodecParameters, asnCodecCtxMaxStackSize);
        return optCodecParameters;
    }


}
